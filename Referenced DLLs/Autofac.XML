<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Autofac</name>
    </assembly>
    <members>
        <member name="T:Autofac.Core.Resolving.CircularDependencyDetectorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.CircularDependency">
            <summary>
              Looks up a localized string similar to Circular component dependency detected: {0}..
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.CircularDependencyDetectorResources.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="T:Autofac.Util.Disposable">
            <summary>
            Base class for disposable objects.
            </summary>
        </member>
        <member name="M:Autofac.Util.Disposable.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Autofac.Util.Disposable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Util.Disposable.CheckNotDisposed">
            <summary>
            Checks that this instance has not been disposed.
            </summary>
        </member>
        <member name="P:Autofac.Util.Disposable.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
            <value>
            	<c>true</c> if this instance is disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Autofac.Core.IComponentRegistration">
            <summary>
            Describes a logical component within the container.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentRegistration.RaisePreparing(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Called by the container when an instance is required.
            </summary>
            <param name="context">The context in which the instance will be activated.</param>
            <param name="parameters">Parameters for activation.</param>
        </member>
        <member name="M:Autofac.Core.IComponentRegistration.RaiseActivating(Autofac.Core.IComponentContext,System.Object)">
            <summary>
            Called by the container once an instance has been constructed.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Core.IComponentRegistration.RaiseActivated(Autofac.Core.IComponentContext,System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Activator">
            <summary>
            The activator used to create instances.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Lifetime">
            <summary>
            The lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Sharing">
            <summary>
            Whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Ownership">
            <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.Services">
            <summary>
            The services provided by the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.IComponentRegistration.ExtendedProperties">
            <summary>
            Additional data associated with the component.
            </summary>
        </member>
        <member name="E:Autofac.Core.IComponentRegistration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Core.IComponentRegistration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Core.IComponentRegistration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.#ctor(System.Guid,Autofac.Core.IInstanceActivator,Autofac.Core.IComponentLifetime,Autofac.Core.InstanceSharing,Autofac.Core.InstanceOwnership,System.Collections.Generic.IEnumerable{Autofac.Core.Service},System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a new component registration.
            </summary>
            <param name="id">Unique identifier for the component.</param>
            <param name="activator">Activator used to activate instances.</param>
            <param name="lifetime">Determines how the component will be associated with its lifetime.</param>
            <param name="sharing">Whether the component is shared within its lifetime scope.</param>
            <param name="ownership">Whether the component instances are disposed at the end of their lifetimes.</param>
            <param name="services">Services the component provides.</param>
            <param name="extendedProperties">Data associated with the component.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.RaisePreparing(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Called by the container when an instance is required.
            </summary>
            <param name="context">The context in which the instance will be activated.</param>
            <param name="parameters">Parameters for activation.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivating(Autofac.Core.IComponentContext,System.Object)">
            <summary>
            Called by the container once an instance has been constructed.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.RaiseActivated(Autofac.Core.IComponentContext,System.Object)">
            <summary>
            Called by the container once an instance has been fully constructed, including
            any requested objects that depend on the instance.
            </summary>
            <param name="context">The context in which the instance was activated.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistration.ToString">
            <summary>
            Describes the component in a human-readable form.
            </summary>
            <returns>A description of the component.</returns>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Id">
            <summary>
            A unique identifier for this component (shared in all sub-contexts.)
            This value also appears in Services.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Activator">
            <summary>
            The activator used to create instances.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Lifetime">
            <summary>
            The lifetime associated with the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Sharing">
            <summary>
            Whether the component instances are shared or not.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Ownership">
            <summary>
            Whether the instances of the component should be disposed by the container.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.Services">
            <summary>
            The services provided by the component.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistration.ExtendedProperties">
            <summary>
            Additional data associated with the component.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistration.Preparing">
            <summary>
            Fired when a new instance is required. The instance can be
            provided in order to skip the regular activator, by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistration.Activating">
            <summary>
            Fired when a new instance is being activated. The instance can be
            wrapped or switched at this time by setting the Instance property in
            the provided event arguments.
            </summary>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistration.Activated">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="T:Autofac.Core.InstanceOwnership">
            <summary>
            Determines when instances supporting IDisposable are disposed.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceOwnership.ExternallyOwned">
            <summary>
            The lifetime scope does not dispose the instances.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceOwnership.OwnedByLifetimeScope">
            <summary>
            The instances are disposed when the lifetime scope is disposed.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.InstanceActivator">
            <summary>
            Base class for instance activators.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.InstanceActivator.#ctor(System.Type)">
            <summary>
            Create an instance activator that will return instances compatible
            with <paramref name="limitType"/>.
            </summary>
            <param name="limitType">Most derived type to which instances can be cast.</param>
        </member>
        <member name="P:Autofac.Core.Activators.InstanceActivator.LimitType">
            <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="T:Autofac.Core.IRegistrationSource">
            <summary>
            Allows registrations to be made on-the-fly when unregistered
            services are requested (lazy registrations.)
            </summary>
        </member>
        <member name="M:Autofac.Core.IRegistrationSource.TryGetRegistration(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Boolean},Autofac.Core.IComponentRegistration@)">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registeredServicesTest">A predicate that can be queried to determine if a service is already registered.</param>
            <param name="registration">A registration providing the service.</param>
            <returns>True if the registration could be created.</returns>
        </member>
        <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetime">
            <summary>
            Attaches the component's lifetime to scopes matching a supplied expression.
            </summary>
        </member>
        <member name="T:Autofac.Core.IComponentLifetime">
            <summary>
            Locates the lifetime to which instances of a component should be attached.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.#ctor(System.Linq.Expressions.Expression{System.Func{Autofac.ILifetimeScope,System.Boolean}})">
            <summary>
            Match scopes based on the provided expression.
            </summary>
            <param name="matchExpression">Expression describing scopes that will match.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.MatchingScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.ISharingLifetimeScope">
            <summary>
            Defines a nested structure of lifetimes.
            </summary>
        </member>
        <member name="T:Autofac.ILifetimeScope">
            <summary>
            An <see cref="T:Autofac.ILifetimeScope"/> tracks the instantiation of component instances.
            It defines a boundary in which instances are shared and configured.
            Disposing an <see cref="T:Autofac.ILifetimeScope"/> will dispose the components that were
            resolved through it.
            </summary>
            <example>
            <code>
            // See IContainer for definition of the container variable
            using (var requestScope = container.BeginLifetimeScope())
            {
                // Note that handler is resolved from requestScope, not
                // from the container:
                
                var handler = requestScope.Resolve&lt;IRequestHandler&gt;();
                handler.Handle(request);
                
                // When requestScope is disposed, all resources used in processing
                // the request will be released.
            }
            </code>
            </example>
            <remarks>
            All long-running applications should resolve components via an
            <see cref="T:Autofac.ILifetimeScope"/>. Choosing the duration of the lifetime is application-
            specific. The standard Autofac WCF and ASP.NET/MVC integrations are already configured
            to create and release <see cref="T:Autofac.ILifetimeScope"/>s as appropriate. For example, the
            ASP.NET integration will create and release an <see cref="T:Autofac.ILifetimeScope"/> per HTTP
            request.
            Most <see cref="T:Autofac.ILifetimeScope"/> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.Core.IComponentContext"/> interface.
            </remarks>
            <seealso cref="T:Autofac.IContainer"/>
            <seealso cref="T:Autofac.Core.IComponentContext"/>
            <seealso cref="M:Autofac.Builder.RegistrationBuilder`3.ShareInstanceIn(System.Object)"/>
            <seealso cref="M:Autofac.Builder.RegistrationBuilder`3.ShareInstanceInLifetimeScope"/>
            <seealso cref="T:Autofac.Core.InstanceSharing"/>
            <seealso cref="T:Autofac.Core.IComponentLifetime"/>
        </member>
        <member name="T:Autofac.Core.IComponentContext">
            <summary>
            The context in which a service can be accessed or a component's
            dependencies resolved. Disposal of a context will dispose any owned
            components.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentContext.Resolve(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="P:Autofac.Core.IComponentContext.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="M:Autofac.ILifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new nested scope. Component instances created via the new scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="P:Autofac.ILifetimeScope.Disposer">
            <summary>
            The disposer associated with this <see cref="T:Autofac.ILifetimeScope"/>.
            Component instances can be associated with it manually if required.
            </summary>
            <remarks>Typical usage does not require interaction with this member- it
            is used when extending the container.</remarks>
        </member>
        <member name="P:Autofac.ILifetimeScope.Tag">
            <summary>
            The tag applied to the <see cref="T:Autofac.ILifetimeScope"/>.
            </summary>
            <remarks>Tags allow a level in the lifetime hierarchy to be identified.
            In most applications, tags are not necessary.</remarks>
            <seealso cref="M:Autofac.Builder.RegistrationBuilder`3.ShareInstanceIn(System.Object)"/>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.TryGetSharedInstance(System.Guid,System.Object@)">
            <summary>
            Try to retrieve an instance based on a GUID key.
            </summary>
            <param name="id">Key to look up.</param>
            <param name="result">Instance corresponding to key.</param>
            <returns>True if an instance exists.</returns>
        </member>
        <member name="M:Autofac.Core.ISharingLifetimeScope.AddSharedInstance(System.Guid,System.Object)">
            <summary>
            Add an instance associdated with a GUID key.
            </summary>
            <param name="id">Key to associate with the instance.</param>
            <param name="newInstance">The instance.</param>
        </member>
        <member name="P:Autofac.Core.ISharingLifetimeScope.RootLifetimeScope">
            <summary>
            The root of the sharing hierarchy.
            </summary>
        </member>
        <member name="P:Autofac.Core.ISharingLifetimeScope.ParentLifetimeScope">
            <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="T:Autofac.Core.IDisposer">
            <summary>
            Provided on an object that will dispose of other objects when it is
            itself disposed.
            </summary>
        </member>
        <member name="M:Autofac.Core.IDisposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Autofac.Core.IComponentRegistry">
            <summary>
            Provides component registrations according to the services they provide.
            </summary>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>
            Attempts to find a default registration for the specified service.
            </summary>
            <param name="service">The service to look up.</param>
            <param name="registration">The default registration for the service.</param>
            <returns>True if a registration exists.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Autofac.Core.IComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:Autofac.Core.IComponentRegistry.Registrations">
            <summary>
            Enumerate the registered components.
            </summary>
        </member>
        <member name="E:Autofac.Core.IComponentRegistry.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector">
            <summary>
            Selects a constructor based on its signature.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.IConstructorSelector">
            <summary>
            Selects the best constructor from a set of available constructors.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.IConstructorSelector.SelectConstructorBinding(System.Collections.Generic.IEnumerable{Autofac.Core.Activators.Reflection.ConstructorParameterBinding})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.#ctor(System.Type[])">
            <summary>
            Match constructors with the provided signature.
            </summary>
            <param name="signature">Signature to match.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelector.SelectConstructorBinding(System.Collections.Generic.IEnumerable{Autofac.Core.Activators.Reflection.ConstructorParameterBinding})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.IConstructorFinder">
            <summary>
            Find suitable constructors from which to select.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.IConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="T:Autofac.NamedParameter">
            <summary>
            A parameter identified by name. When applied to a reflection-based
            component, <see cref="P:Autofac.NamedParameter.Name"/> will be matched against
            the name of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(
                new Parameter[] { new NamedParameter("amount", 123) });
            </code>
            </example>
        </member>
        <member name="T:Autofac.Core.ConstantParameter">
            <summary>
            Base class for parameters that provide a constant value.
            </summary>
        </member>
        <member name="T:Autofac.Core.Parameter">
            <summary>
            Used in order to provide a value to a constructor parameter or property on an instance
            being created by the container.
            </summary>
            <remarks>
            Not all parameters can be applied to all sites.
            </remarks>
        </member>
        <member name="M:Autofac.Core.Parameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.Core.ConstantParameter.#ctor(System.Object,System.Predicate{System.Reflection.ParameterInfo})">
            <summary>
            Create a constant parameter that will apply to parameters matching
            the supplied predicate.
            </summary>
            <param name="value"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Autofac.Core.ConstantParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="P:Autofac.Core.ConstantParameter.Value">
            <summary>
            The value of the parameter.
            </summary>
        </member>
        <member name="M:Autofac.NamedParameter.#ctor(System.String,System.Object)">
            <summary>
            Create a <see cref="T:Autofac.NamedParameter"/> with the specified constant value.
            </summary>
            <param name="name">The name of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Autofac.NamedParameter.Name">
            <summary>
            The name of the parameter.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentNotRegisteredExceptionResources.Message">
            <summary>
              Looks up a localized string similar to The requested service &apos;{0}&apos; has not been registered..
            </summary>
        </member>
        <member name="T:Autofac.Core.IInstanceActivator">
            <summary>
            Activates component instances.
            </summary>
        </member>
        <member name="M:Autofac.Core.IInstanceActivator.ActivateInstance(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="P:Autofac.Core.IInstanceActivator.LimitType">
            <summary>
            The most specific type that the component instances are known to be castable to.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.RequiredConstructorNotAvailable">
            <summary>
              Looks up a localized string similar to The required constructor is unavailable..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.MatchingSignatureConstructorSelectorResources.TooManyConstructorsMatch">
            <summary>
              Looks up a localized string similar to More than one constructor matches the selection policy..
            </summary>
        </member>
        <member name="T:Autofac.TypedParameter">
            <summary>
            A parameter that can supply values to sites that exactly
            match a specified type. When applied to a reflection-based
            component, <see cref="P:Autofac.TypedParameter.Type"/> will be matched against
            the types of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(
                new Parameter[] { new TypedParameter(typeof(int), 123) });
            </code>
            </example>
        </member>
        <member name="M:Autofac.TypedParameter.#ctor(System.Type,System.Object)">
            <summary>
            Create a typed parameter with the specified constant value.
            </summary>
            <param name="type">The exact type to match.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="M:Autofac.TypedParameter.From``1(``0)">
            <summary>
            Shortcut for creating <see cref="T:Autofac.TypedParameter"/> 
            by using the <typeparamref name="T"/>
            </summary>
            <typeparam name="T">type to be used for the parameter</typeparam>
            <param name="value">The parameter value.</param>
            <returns>new typed parameter</returns>
        </member>
        <member name="P:Autofac.TypedParameter.Type">
            <summary>
            The type against which targets are matched.
            </summary>
        </member>
        <member name="T:Autofac.ResolvedParameter">
            <summary>
            Flexible parameter type allows arbitrary values to be retrieved
            from the resolution context.
            </summary>
        </member>
        <member name="M:Autofac.ResolvedParameter.#ctor(System.Func{System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Boolean},System.Func{System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Object})">
            <summary>
            Create an instance of the ResolvedParameter class.
            </summary>
            <param name="predicate">A predicate that determines which parameters on a constructor will be supplied by this instance.</param>
            <param name="valueAccessor">A function that supplies the parameter value given the context.</param>
        </member>
        <member name="M:Autofac.ResolvedParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="T:Autofac.Builder.SingleRegistrationStyle">
            <summary>
            Registration style for individual components.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.Id">
            <summary>
            The id used for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.SingleRegistrationStyle.RegisteredHandlers">
            <summary>
            Handlers to notify of the component registration event.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentNotRegisteredException">
            <summary>
            A service was requested that cannot be provided
            by the container.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(Autofac.Core.Service,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="service">The service.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentNotRegisteredException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="T:Autofac.PositionalParameter">
            <summary>
            A parameter that is identified according to an integer representing its
            position in an argument list. When applied to a reflection-based
            component, <see cref="P:Autofac.PositionalParameter.Position"/> will be matched against
            the indices of the component's constructor arguments. When applied to
            a delegate-based component, the parameter can be accessed using
            <see cref="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)"/>.
            </summary>
            <example>
            Component with parameter:
            <code>
            public class MyComponent
            {
                public MyComponent(int amount) { ... }
            }
            </code>
            Providing the parameter:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterType&lt;MyComponent&gt;();
            var container = builder.Build();
            var myComponent = container.Resolve&lt;MyComponent&gt;(
                new Parameter[] { new PositionalParameter(0, 123) });
            </code>
            </example>
        </member>
        <member name="M:Autofac.PositionalParameter.#ctor(System.Int32,System.Object)">
            <summary>
            Construct a positional parameter with the specified constant value.
            </summary>
            <param name="position">The zero-based position of the parameter.</param>
            <param name="value">The parameter value.</param>
        </member>
        <member name="P:Autofac.PositionalParameter.Position">
            <summary>
            The zero-based position of the parameter.
            </summary>
        </member>
        <member name="T:Autofac.ContainerBuilder">
            <summary>
            Used to build an <see cref="T:Autofac.IContainer"/> from component registrations.
            </summary>
            <example>
            <code>
            var builder = new ContainerBuilder();
            
            builder.RegisterType&lt;Logger&gt;()
                .As&lt;ILogger&gt;()
                .SingleSharedInstance();
            
            builder.RegisterDelegate(c =&gt; new MessageHandler(c.Resolve&lt;ILogger&gt;()));
            
            var container = builder.Build();
            // resolve components from container...
            </code>
            </example>
            <remarks>Most <see cref="T:Autofac.ContainerBuilder"/> functionality is accessed
            via extension methods in <see cref="T:Autofac.RegistrationExtensions"/>.</remarks>
            <seealso cref="T:Autofac.IContainer"/>
            <see cref="T:Autofac.RegistrationExtensions"/>
        </member>
        <member name="M:Autofac.ContainerBuilder.RegisterCallback(System.Action{Autofac.Core.IComponentRegistry})">
            <summary>
            Register a callback that will be invoked when the container is configured.
            </summary>
            <remarks>This is primarily for extending the builder syntax.</remarks>
            <param name="configurationCallback">Callback to execute.</param>
        </member>
        <member name="M:Autofac.ContainerBuilder.Build">
            <summary>
            Create a new container with the component registrations that have been made.
            </summary>
            <remarks>
            Build can only be called once per <see cref="T:Autofac.ContainerBuilder"/>
            - this prevents ownership issues for provided instances.
            </remarks>
            <returns>A new container with the configured component registrations.</returns>
        </member>
        <member name="M:Autofac.ContainerBuilder.Build(Autofac.Core.IComponentRegistry)">
            <summary>
            Configure an existing component registry with the component registrations
            that have been made.
            </summary>
            <remarks>
            Build can only be called once per <see cref="T:Autofac.ContainerBuilder"/>
            - this prevents ownership issues for provided instances.
            </remarks>
            <param name="componentRegistry">An existing component registry to make the registrations in.</param>
        </member>
        <member name="T:Autofac.Builder.SimpleActivatorData">
            <summary>
            An activator builder with no parameters.
            </summary>
        </member>
        <member name="M:Autofac.Builder.SimpleActivatorData.#ctor(Autofac.Core.IInstanceActivator)">
            <summary>
            Return the provided activator.
            </summary>
            <param name="activator">The activator to return.</param>
        </member>
        <member name="P:Autofac.Builder.SimpleActivatorData.Activator">
            <summary>
            Gets the activator.
            </summary>
        </member>
        <member name="T:Autofac.Core.ActivatingEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.Core.ActivatingEventArgs`1.#ctor(Autofac.Core.IComponentContext,Autofac.Core.IComponentRegistration,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatingEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Autofac.Builder.RegistrationExtensionsResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationExtensionsResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationExtensionsResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationExtensionsResources.ComponentDoesNotSupportService">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not assignable to service &apos;{1}&apos;..
            </summary>
        </member>
        <member name="T:Autofac.Features.Collections.ImplicitCollectionSupportModule">
            <summary>
            Configures the container so that requests for IEnumerable{T} or T[]
            will result in all of the available instances of T being returned.
            </summary>
        </member>
        <member name="T:Autofac.Core.IModule">
            <summary>
            Represents a set of components and related functionality
            packaged together.
            </summary>
        </member>
        <member name="M:Autofac.Core.IModule.Configure(Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Features.Collections.ImplicitCollectionSupportModule.Configure(Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="T:Autofac.Builder.Module">
            <summary>
            Base class for user-defined modules. Modules can add a set of releated components
            to a container (<see cref="M:Autofac.Builder.Module.Load(Autofac.ContainerBuilder)"/>) or attach cross-cutting functionality
            to other components (<see cref="M:Autofac.Builder.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)"/>.
            Modules are given special support in the XML configuration feature - see
            http://code.google.com/p/autofac/wiki/StructuringWithModules.
            </summary>
            <remarks>Provides a user-friendly way to implement <see cref="T:Autofac.Core.IModule"/>
            via <see cref="T:Autofac.ContainerBuilder"/>.</remarks>
            <example>
            Defining a module:
            <code>
            public class DataAccessModule : Module
            {
                public string ConnectionString { get; set; }
                
                public override void Load(ContainerBuilder moduleBuilder)
                {
                    moduleBuilder.RegisterGeneric(typeof(MyRepository&lt;&gt;))
                        .As(typeof(IRepository&lt;&gt;))
                        .ShareInstanceIn(WebLifetime.Request);
                    
                    moduleBuilder.RegisterDelegate(c =&gt; new MyDbConnection(ConnectionString))
                        .As&lt;IDbConnection&gt;()
                        .ShareInstanceIn(WebLifetime.Request);
                }
            }
            </code>
            Using the module:
            <code>
            var builder = new ContainerBuilder();
            builder.RegisterModule(new DataAccessModule { ConnectionString = "..." });
            var container = builder.Build();
            var customers = container.Resolve&lt;IRepository&lt;Customer&gt;&gt;();
            </code>
            </example>
        </member>
        <member name="M:Autofac.Builder.Module.Configure(Autofac.Core.IComponentRegistry)">
            <summary>
            Apply the module to the component registry.
            </summary>
            <param name="componentRegistry">Component registry to apply configuration to.</param>
        </member>
        <member name="M:Autofac.Builder.Module.Load(Autofac.ContainerBuilder)">
            <summary>
            Override to add registrations to the container.
            </summary>
            <remarks>
            Note that the ContainerBuilder parameter is not the same one
            that the module is being registered by (i.e. it can have its own defaults.)
            </remarks>
            <param name="moduleBuilder">The builder through which components can be
            registered.</param>
        </member>
        <member name="M:Autofac.Builder.Module.AttachToComponentRegistration(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>
            Override to attach module-specific functionality to a
            component registration.
            </summary>
            <remarks>This method will be called for all existing <i>and future</i> component
            registrations - ordering is not important.</remarks>
            <param name="componentRegistry">The component registry.</param>
            <param name="registration">The registration to attach functionality to.</param>
        </member>
        <member name="T:Autofac.Core.TypedService">
            <summary>
            Identifies a service according to a type to which it can be assigned.
            </summary>
        </member>
        <member name="T:Autofac.Core.Service">
            <summary>
            Services are the lookup keys used to locate component instances.
            </summary>
        </member>
        <member name="M:Autofac.Core.Service.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="M:Autofac.Core.Service.op_Equality(Autofac.Core.Service,Autofac.Core.Service)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Core.Service.op_Inequality(Autofac.Core.Service,Autofac.Core.Service)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="lhs">The LHS.</param>
            <param name="rhs">The RHS.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:Autofac.Core.Service.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.Service.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.Service.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="M:Autofac.Core.TypedService.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.TypedService"/> class.
            </summary>
            <param name="serviceType">Type of the service.</param>
        </member>
        <member name="M:Autofac.Core.TypedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.TypedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.TypedService.ServiceType">
            <summary>
            Gets or sets the type of the service.
            </summary>
            <value>The type of the service.</value>
        </member>
        <member name="P:Autofac.Core.TypedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Autofac.Core.NamedService">
            <summary>
            Identifies a service using a textual name.
            </summary>
        </member>
        <member name="M:Autofac.Core.NamedService.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.NamedService"/> class.
            </summary>
            <param name="serviceName">Name of the service.</param>
        </member>
        <member name="M:Autofac.Core.NamedService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.NamedService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.NamedService.ServiceName">
            <summary>
            Gets or sets the name of the service.
            </summary>
            <value>The name of the service.</value>
        </member>
        <member name="P:Autofac.Core.NamedService.Description">
            <summary>
            Gets a human-readable description of the service.
            </summary>
            <value>The description.</value>
        </member>
        <member name="T:Autofac.Core.InstanceSharing">
            <summary>
            Determines whether instances are shared within a lifetime scope.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceSharing.None">
            <summary>
            Each request for an instance will return a new object.
            </summary>
        </member>
        <member name="F:Autofac.Core.InstanceSharing.Shared">
            <summary>
            Each request for an instance will return the same object.
            </summary>
        </member>
        <member name="T:Autofac.Util.Enforce">
            <summary>
            Helper methods used throughout the codebase.
            </summary>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentNotNull``1(``0,System.String)">
            <summary>
            Enforce that an argument is not null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="name"></param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentElementNotNull``1(``0,System.String)">
            <summary>
            Enforce that sequence does not contain null. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <param name="name">The name.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Util.Enforce.NotNull``1(``0)">
            <summary>
            Enforces that the provided object is non-null.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The value.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentNotNullOrEmpty(System.String,System.String)">
            <summary>
            Enforce that an argument is not null or empty. Returns the
            value if valid so that it can be used inline in
            base initialiser syntax.
            </summary>
            <param name="value">The value.</param>
            <param name="description">The description.</param>
            <returns><paramref name="value"/></returns>
        </member>
        <member name="M:Autofac.Util.Enforce.ArgumentTypeIsFunction(System.Type)">
            <summary>
            Enforce that the argument is a delegate type.
            </summary>
            <param name="delegateType">The type to test.</param>
        </member>
        <member name="T:Autofac.IContainer">
            <summary>
            Creates, wires dependencies and manages lifetime for a set of components.
            Most instances of <see cref="T:Autofac.IContainer"/> are created 
            by a <see cref="T:Autofac.ContainerBuilder"/>.
            </summary>
            <example>
            <code>
            // See ContainerBuilder for the definition of the builder variable
            using (var container = builder.Build())
            {
                var program = container.Resolve&lt;Program&gt;();
                program.Run();
            }
            </code>
            </example>
            <remarks>
            Most <see cref="T:Autofac.IContainer"/> functionality is provided by extension methods
            on the inherited <see cref="T:Autofac.Core.IComponentContext"/> interface.
            </remarks>
            <seealso cref="T:Autofac.ILifetimeScope"/>
            <seealso cref="T:Autofac.Core.IComponentContext"/>
            <seealso cref="T:Autofac.ResolutionExtensions"/>
            <seealso cref="T:Autofac.ContainerBuilder"/>
        </member>
        <member name="T:Autofac.ParameterExtensions">
            <summary>
            Extension methods that simplify extraction of parameter values from
            an <see cref="T:System.Collections.Generic.IEnumerable`1"/> where T is <see cref="T:Autofac.Core.Parameter"/>.
            Each method returns the first matching parameter value, or throws an exception if
            none is provided.
            </summary>
        </member>
        <member name="M:Autofac.ParameterExtensions.Named``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.String)">
            <summary>
            Retrieve a named parameter value from a <see cref="T:Autofac.NamedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="name">The name of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Autofac.NamedParameter"/>
        </member>
        <member name="M:Autofac.ParameterExtensions.Positional``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Int32)">
            <summary>
            Retrieve a positional parameter value from a <see cref="T:Autofac.PositionalParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <param name="position">The zero-based position of the parameter to select.</param>
            <returns>The value of the selected parameter.</returns>
            <remarks>The position value is the one associated with the parameter when
            it was constructed, <b>not</b> its index into the <paramref name="parameters"/>
            sequence.</remarks>
            <seealso cref="T:Autofac.PositionalParameter"/>
        </member>
        <member name="M:Autofac.ParameterExtensions.TypedAs``1(System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a typed parameter value from a <see cref="T:Autofac.TypedParameter"/> instance.
            </summary>
            <typeparam name="T">The type to which the returned value will be cast.</typeparam>
            <param name="parameters">The available parameters to choose from.</param>
            <returns>The value of the selected parameter.</returns>
            <seealso cref="T:Autofac.TypedParameter"/>
        </member>
        <member name="T:Autofac.Core.PreparingEventArgs`1">
            <summary>
            Fired before the activation process to allow parameters to be changed or an alternative
            instance to be provided.
            </summary>
        </member>
        <member name="M:Autofac.Core.PreparingEventArgs`1.#ctor(Autofac.Core.IComponentContext,Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.PreparingEventArgs`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="parameters">The parameters.</param>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs`1.Context">
            <summary>
            The context in which the activation is occurring.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs`1.Component">
            <summary>
            The component providing the instance being activated.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs`1.Instance">
            <summary>
            An instance can be supplied in order to avoid using the regular activator.
            </summary>
        </member>
        <member name="P:Autofac.Core.PreparingEventArgs`1.Parameters">
            <summary>
            The parameters supplied to the activator.
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.LifetimeScope">
            <summary>
            Lifetime scope implementation.
            </summary>
        </member>
        <member name="F:Autofac.Core.Lifetime.LifetimeScope._synchRoot">
            <summary>
            Protects instance variables from concurrent access.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.Lifetime.LifetimeScope)">
            <summary>
            Create a lifetime scope for the provided components and nested beneath a parent.
            </summary>
            <param name="componentRegistry">Components used in the scope.</param>
            <param name="parent">Parent scope.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.#ctor(Autofac.Core.IComponentRegistry)">
            <summary>
            Create a lifetime scope for the provided components.
            </summary>
            <param name="componentRegistry">Components used in the scope.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.BeginLifetimeScope">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.Resolve(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.TryGetSharedInstance(System.Guid,System.Object@)">
            <summary>
            Try to retrieve an instance based on a GUID key.
            </summary>
            <param name="id">Key to look up.</param>
            <param name="result">Instance corresponding to key.</param>
            <returns>True if an instance exists.</returns>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.AddSharedInstance(System.Guid,System.Object)">
            <summary>
            Add an instance associdated with a GUID key.
            </summary>
            <param name="id">Key to associate with the instance.</param>
            <param name="newInstance">The instance.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Lifetime.LifetimeScope.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is 
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.ParentLifetimeScope">
            <summary>
            The parent of this node of the hierarchy, or null.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.RootLifetimeScope">
            <summary>
            The root of the sharing hierarchy.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.Tag">
            <summary>
            Tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="P:Autofac.Core.Lifetime.LifetimeScope.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="T:Autofac.Builder.DynamicRegistrationStyle">
            <summary>
            Registration style for dynamic registrations.
            </summary>
        </member>
        <member name="T:Autofac.Core.ComponentRegisteredEventArgs">
            <summary>
            Information about the ocurrence of a component being registered
            with a container.
            </summary>
        </member>
        <member name="M:Autofac.Core.ComponentRegisteredEventArgs.#ctor(Autofac.Core.IComponentRegistry,Autofac.Core.IComponentRegistration)">
            <summary>
            Create a new instance with a valid container and component registration.
            </summary>
            <param name="registry">The container into which the registration 
            was made.</param>
            <param name="componentRegistration">The component registration.</param>
        </member>
        <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistry">
            <summary>
            The container into which the registration was made.
            </summary>
        </member>
        <member name="P:Autofac.Core.ComponentRegisteredEventArgs.ComponentRegistration">
            <summary>
            The component registration.
            </summary>
        </member>
        <member name="T:Autofac.Core.Lifetime.CurrentScopeLifetime">
            <summary>
            Attaches the instance's lifetime to the current lifetime scope.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.CurrentScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.Core.DependencyResolutionException">
            <summary>
            Problem resolving dependencies, e.g. circular references, no callable constructor etc.
            </summary>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.DependencyResolutionException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Autofac.Core.DependencyResolutionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="info"/> parameter is null. </exception>
            <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult"/> is zero (0). </exception>
        </member>
        <member name="F:Autofac.Core.Resolving.CircularDependencyDetector.MaxResolveDepth">
            <summary>
            Catch circular dependencies that are triggered by post-resolve processing (e.g. 'OnActivated')
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivator">
            <summary>
            Uses reflection to activate instances of a type.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.#ctor(System.Type,Autofac.Core.Activators.Reflection.IConstructorFinder,Autofac.Core.Activators.Reflection.IConstructorSelector,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Create an activator for the provided type.
            </summary>
            <param name="implementationType">Type to activate.</param>
            <param name="constructorFinder">Constructor finder.</param>
            <param name="constructorSelector">Constructor selector.</param>
            <param name="configuredParameters">Parameters configured explicitly for this instance.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ReflectionActivator.ActivateInstance(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorFinder">
            <summary>
            The constructor finder.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivator.ConstructorSelector">
            <summary>
            The constructor selector.
            </summary>
        </member>
        <member name="T:Autofac.Builder.IActivatorGenerator`1">
            <summary>
            Generates activators in an IRegistrationSource.
            </summary>
            <typeparam name="TActivatorData">Data associated with the specific kind of activator.</typeparam>
        </member>
        <member name="M:Autofac.Builder.IActivatorGenerator`1.TryGenerateActivator(Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Service},`0,Autofac.Core.IInstanceActivator@,System.Collections.Generic.IEnumerable{Autofac.Core.Service}@)">
            <summary>
            Given a requested service and registration data, attempt to generate an
            activator for the service.
            </summary>
            <param name="service">Service that was requested.</param>
            <param name="configuredServices">Services associated with the activator generator.</param>
            <param name="reflectionActivatorData">Data specific to this kind of activator.</param>
            <param name="activator">Resulting activator.</param>
            <param name="services">Services provided by the activator.</param>
            <returns>True if an activator could be generated.</returns>
        </member>
        <member name="T:Autofac.Core.Lifetime.RootScopeLifetime">
            <summary>
            Attaches the component's lifetime to the root scope.
            </summary>
        </member>
        <member name="M:Autofac.Core.Lifetime.RootScopeLifetime.FindScope(Autofac.Core.ISharingLifetimeScope)">
            <summary>
            Given the most nested scope visible within the resolve operation, find
            the scope for the component.
            </summary>
            <param name="mostNestedVisibleScope">The most nested visible scope.</param>
            <returns>The scope for the component.</returns>
        </member>
        <member name="T:Autofac.RegistrationExtensions">
            <summary>
            Adds registration syntax to the <see cref="T:Autofac.ContainerBuilder"/> type.
            </summary>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterModule(Autofac.ContainerBuilder,Autofac.Core.IModule)">
            <summary>
            Add a module to the container.
            </summary>
            <param name="builder">The builder to register the module with.</param>
            <param name="module">The module to add.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterComponent(Autofac.ContainerBuilder,Autofac.Core.IComponentRegistration)">
            <summary>
            Add a component to the container.
            </summary>
            <param name="builder">The builder to register the component with.</param>
            <param name="registration">The component to add.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterSource(Autofac.ContainerBuilder,Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source to the container.
            </summary>
            <param name="builder">The builder to register the registration source via.</param>
            <param name="registrationSource">The registration source to add.</param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterInstance``1(Autofac.ContainerBuilder,``0)">
            <summary>
            Register an instance as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="instance">The instance to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterType``1(Autofac.ContainerBuilder)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <typeparam name="TImplementor">The type of the component implementation.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterType(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register a component to be created through reflection.
            </summary>
            <param name="implementationType">The type of the component implementation.</param>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDelegate``1(Autofac.ContainerBuilder,System.Func{Autofac.Core.IComponentContext,``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterDelegate``1(Autofac.ContainerBuilder,System.Func{Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},``0})">
            <summary>
            Register a delegate as a component.
            </summary>
            <typeparam name="T">The type of the instance.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="delegate">The delegate to register.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterSingleComponent``3(Autofac.Core.IComponentRegistry,Autofac.Builder.RegistrationBuilder{``0,``1,``2},Autofac.Core.IInstanceActivator)">
            <summary>
            Register a component directly into a component registry.
            </summary>
            <typeparam name="TLimit"></typeparam>
            <typeparam name="TActivatorData"></typeparam>
            <typeparam name="TSingleRegistrationStyle"></typeparam>
            <param name="cr"></param>
            <param name="rb"></param>
            <param name="activator"></param>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneric(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Register an un-parameterised generic type, e.g. Repository&lt;&gt;.
            Concrete types will be made as they are requested, e.g. with Resolve&lt;Repository&lt;int&gt;&gt;().
            </summary>
            <param name="builder">Container builder.</param>
            <param name="implementor">The open generic implementation type.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},System.Reflection.BindingFlags)">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="bindingFlags">Binding flags used when searching for constructors.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.FindConstructorsWith``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorFinder)">
            <summary>
            Set the policy used to find candidate constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorFinder">Policy to be used when searching for constructors.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},System.Type[])">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="signature">Constructor signature to match.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.UsingConstructor``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},Autofac.Core.Activators.Reflection.IConstructorSelector)">
            <summary>
            Set the policy used to select from available constructors on the implementation type.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set policy on.</param>
            <param name="constructorSelector">Policy to be used when selecting a constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},System.String,System.Object)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameterName">Name of a constructor parameter on the target type.</param>
            <param name="parameterValue">Value of a </param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.WithParameter``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},Autofac.Core.Parameter)">
            <summary>
            Configure an explicit value for a constructor parameter.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TStyle">Registration style.</typeparam>
            <typeparam name="TReflectionActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to set parameter on.</param>
            <param name="parameter">The parameter to supply to the constructor.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneratedFactory(Autofac.ContainerBuilder,System.Type,Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <param name="builder">Container builder.</param>
            <param name="delegateType">Factory type to generate.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder,Autofac.Core.Service)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <param name="service">The service that the delegate will return instances of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.RegisterGeneratedFactory``1(Autofac.ContainerBuilder)">
            <summary>
            Registers a factory delegate.
            </summary>
            <typeparam name="TDelegate">The type of the delegate.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.NamedParameterMapping``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by name.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.PositionalParameterMapping``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by position.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.RegistrationExtensions.TypedParameterMapping``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2})">
            <summary>
            Changes the parameter mapping mode of the supplied delegate type to match
            parameters by type.
            </summary>
            <typeparam name="TDelegate">Factory delegate type</typeparam>
            <typeparam name="TGeneratedFactoryActivatorData">Activator data type</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style</typeparam>
            <param name="registration">Registration to change parameter mapping mode of.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="T:Autofac.Builder.RegistrationBuilder`3">
            <summary>
            Data structure used to construct registrations.
            </summary>
            <typeparam name="TLimit">The most specific type to which instances of the registration
            can be cast.</typeparam>
            <typeparam name="TActivatorData">Activator builder type.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style type.</typeparam>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.#ctor(`1,`2)">
            <summary>
            Create a RegistrationBuilder.
            </summary>
            <param name="activatorData">Activator builder.</param>
            <param name="style">Registration style.</param>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.ExternallyOwned">
            <summary>
            Configure the component so that instances are never disposed by the container.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OwnedByLifetimeScope">
            <summary>
            Configure the component so that instances that support IDisposable are
            disposed by the container (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.NoInstanceSharing">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets a new, unique instance (default.)
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.SingleSharedInstance">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            gets the same, shared instance.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.ShareInstanceInLifetimeScope">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a single ILifetimeScope gets the same, shared instance. Dependent components in
            different lifetime scopes will get different instances.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.ShareInstanceIn(System.Object)">
            <summary>
            Configure the component so that every dependent component or call to Resolve()
            within a ILifetimeScope tagged with the provided tag value gets the same, shared instance.
            Dependent components in lifetime scopes that are children of the tagged scope will
            share the parent's instance. If no appropriately tagged scope can be found in the
            hierarchy an <see cref="T:Autofac.Core.DependencyResolutionException"/> is thrown.
            </summary>
            <param name="lifetimeScopeTag">Tag applied to matching lifetime scopes.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``1">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``2">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As``3">
            <summary>
            Configure the services that the component will provide. The generic parameter(s) to As()
            will be exposed as TypedService instances.
            </summary>
            <typeparam name="TService1">Service type.</typeparam>
            <typeparam name="TService2">Service type.</typeparam>
            <typeparam name="TService3">Service type.</typeparam>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(System.Type[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Service types to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.As(Autofac.Core.Service[])">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="services">Services to expose.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.Named(System.String)">
            <summary>
            Configure the services that the component will provide.
            </summary>
            <param name="serviceName">Named service to associate with the component.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnPreparing(System.Action{Autofac.Core.PreparingEventArgs{`0}})">
            <summary>
            Add a handler for the Preparing event. This event allows manipulating of the parameters
            that will be provided to the component.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivating(System.Action{Autofac.Core.ActivatingEventArgs{`0}})">
            <summary>
            Add a handler for the Activating event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.OnActivated(System.Action{Autofac.Core.ActivatedEventArgs{`0}})">
            <summary>
            Add a handler for the Activated event.
            </summary>
            <param name="handler">The event handler.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.PropertiesAutowired(System.Boolean)">
            <summary>
            Configure the component so that any properties whose types are registered in the
            container will be wired to instances of the appropriate service.
            </summary>
            <param name="allowCircularDependencies">If set to true, the properties won't be wired until
            after the component has been activated. This allows property-property and constructor-property
            circularities in the dependency graph.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="M:Autofac.Builder.RegistrationBuilder`3.WithExtendedProperty(System.String,System.Object)">
            <summary>
            Associates data with the component.
            </summary>
            <param name="key">Key by which the data can be located.</param>
            <param name="value">The data value.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.ActivatorData">
            <summary>
            Gets the activator data.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationStyle">
            <summary>
            Gets the registration style.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationBuilder`3.RegistrationData">
            <summary>
            Gets the registration data.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ConstructorParameterBinding">
            <summary>
            Binds a constructor to the parameters that will be used when it is invoked.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.#ctor(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},Autofac.Core.IComponentContext)">
            <summary>
            Construct a new ConstructorParameterBinding.
            </summary>
            <param name="ci">ConstructorInfo to bind.</param>
            <param name="availableParameters">Available parameters.</param>
            <param name="context">Context in which to construct instance.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.Instantiate">
            <summary>
            Invoke the constructor with the parameter bindings.
            </summary>
            <returns>The constructed instance.</returns>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.TargetConstructor">
            <summary>
            The constructor on the target type. The actual constructor used
            might differ, e.g. if using a dynamic proxy.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ConstructorParameterBinding.CanInstantiate">
            <summary>
            True if the binding is valid.
            </summary>
        </member>
        <member name="T:Autofac.Core.ActivatedEventArgs`1">
            <summary>
            Fired when the activation process for a new instance is complete.
            </summary>
        </member>
        <member name="M:Autofac.Core.ActivatedEventArgs`1.#ctor(Autofac.Core.IComponentContext,Autofac.Core.IComponentRegistration,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.ActivatedEventArgs`1"/> class.
            </summary>
            <param name="context">The context.</param>
            <param name="component">The component.</param>
            <param name="instance">The instance.</param>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Context">
            <summary>
            The context in which the activation occurred.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Component">
            <summary>
            The component providing the instance.
            </summary>
        </member>
        <member name="P:Autofac.Core.ActivatedEventArgs`1.Instance">
            <summary>
            The instance that will be used to satisfy the request.
            </summary>
        </member>
        <member name="T:Autofac.Core.Resolving.ResolveOperationResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Resolving.ResolveOperationResources.MaxDepthExceeded">
            <summary>
              Looks up a localized string similar to Probable circular dependency between factory-scoped components. Chain includes &apos;{0}&apos;.
            </summary>
        </member>
        <member name="T:Autofac.Core.Container">
            <summary>
            Standard container implementation.
            </summary>
        </member>
        <member name="F:Autofac.Core.Container.Empty">
            <summary>
            An empty container.
            </summary>
        </member>
        <member name="M:Autofac.Core.Container.#ctor">
            <summary>
            Create a new container.
            </summary>
        </member>
        <member name="M:Autofac.Core.Container.BeginLifetimeScope">
            <summary>
            Begin a new sub-scope. Instances created via the sub-scope
            will be disposed along with it.
            </summary>
            <returns>A new lifetime scope.</returns>
        </member>
        <member name="M:Autofac.Core.Container.Resolve(Autofac.Core.IComponentRegistration,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Resolve an instance of the provided registration within the context.
            </summary>
            <param name="registration">The registration.</param>
            <param name="parameters">Parameters for the instance.</param>
            <returns>
            The component instance.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.Core.Container.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Container.System#IServiceProvider#GetService(System.Type)">
            <summary>
            Gets the service object of the specified type.
            </summary>
            <param name="serviceType">An object that specifies the type of service object 
            to get.</param>
            <returns>
            A service object of type <paramref name="serviceType"/>.-or- null if there is 
            no service object of type <paramref name="serviceType"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.Container.Disposer">
            <summary>
            The disposer associated with this container. Instances can be associated
            with it manually if required.
            </summary>
        </member>
        <member name="P:Autofac.Core.Container.Tag">
            <summary>
            Tag applied to the lifetime scope.
            </summary>
            <remarks>The tag applied to this scope and the contexts generated when
            it resolves component dependencies.</remarks>
        </member>
        <member name="P:Autofac.Core.Container.ComponentRegistry">
            <summary>
            Associates services with the components that provide them.
            </summary>
        </member>
        <member name="T:Autofac.Builder.CollectionRegistrationExtensions">
            <summary>
            Support for MemberOf() style collection registrations.
            </summary>
        </member>
        <member name="M:Autofac.Builder.CollectionRegistrationExtensions.RegisterCollection``1(Autofac.ContainerBuilder)">
            <summary>
            Registers the type as a collection. If no services or names are specified, the
            default services will be IList&lt;T&gt;, ICollection&lt;T&gt;, and IEnumerable&lt;T&gt;        
            </summary>
            <typeparam name="T">The type of the collection elements.</typeparam>
            <param name="builder">Container builder.</param>
            <returns>Registration builder allowing the registration to be configured.</returns>
        </member>
        <member name="M:Autofac.Builder.CollectionRegistrationExtensions.MemberOf``3(Autofac.Builder.RegistrationBuilder{``0,``1,``2},Autofac.Core.Service)">
            <summary>
            Include the element explicitly in a collection configured using RegisterCollection.
            </summary>
            <typeparam name="TLimit">Registration limit type.</typeparam>
            <typeparam name="TSingleRegistrationStyle">Registration style.</typeparam>
            <typeparam name="TActivatorData">Activator data type.</typeparam>
            <param name="registration">Registration to export.</param>
            <param name="service">The collection type to include this item in.</param>
            <returns>A registration builder allowing further configuration of the component.</returns>
        </member>
        <member name="T:Autofac.Core.UniqueService">
            <summary>
            A handy unique service identifier type - all instances will be regarded as unequal.
            </summary>
        </member>
        <member name="M:Autofac.Core.UniqueService.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService"/> class.
            </summary>
        </member>
        <member name="M:Autofac.Core.UniqueService.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:Autofac.Core.UniqueService"/> class.
            </summary>
            <param name="id">The id.</param>
        </member>
        <member name="M:Autofac.Core.UniqueService.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <exception cref="T:System.NullReferenceException">The <paramref name="obj"/> parameter is null.</exception>
        </member>
        <member name="M:Autofac.Core.UniqueService.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
        </member>
        <member name="P:Autofac.Core.UniqueService.Description">
            <summary>
            Provides a programmer-readable description of the identifying feature of the service.
            </summary>
            <value></value>
        </member>
        <member name="T:Autofac.Core.Lifetime.MatchingScopeLifetimeResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Lifetime.MatchingScopeLifetimeResources.MatchingScopeNotFound">
            <summary>
              Looks up a localized string similar to No scope matching the expression &apos;{0}&apos; is visible from the scope in which the instance was requested..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.ReflectionActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsAvailable">
            <summary>
              Looks up a localized string similar to No constructors matching the constructor-finding policy can be found on the target type..
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.Reflection.ReflectionActivatorResources.NoConstructorsBindable">
            <summary>
              Looks up a localized string similar to None of the existing constructors can be satisfied using the available services and parameters..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.AutowiringParameter">
            <summary>
            Supplies values based on the target parameter type.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.AutowiringParameter.CanSupplyValue(System.Reflection.ParameterInfo,Autofac.Core.IComponentContext,System.Func{System.Object}@)">
            <summary>
            Returns true if the parameter is able to provide a value to a particular site.
            </summary>
            <param name="pi">Constructor, method, or property-mutator parameter.</param>
            <param name="context">The component context in which the value is being provided.</param>
            <param name="valueProvider">If the result is true, the valueProvider parameter will
            be set to a function that will lazily retrieve the parameter value. If the result is false,
            will be set to null.</param>
            <returns>True if a value can be supplied; otherwise, false.</returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.JoinWith(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Joins the strings into one single string interspersing the elements with the separator (a-la
            System.String.Join()).
            </summary>
            <param name="elements">The elements.</param>
            <param name="separator">The separator.</param>
            <returns>The joined string.</returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Appends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="trailingItem">The trailing item.</param>
            <returns></returns>
        </member>
        <member name="M:Autofac.Util.SequenceExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Prepends the item to the specified sequence.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sequence">The sequence.</param>
            <param name="leadingItem">The leading item.</param>
            <returns></returns>
        </member>
        <member name="T:Autofac.Util.EnforceResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.CannotBeEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot be empty..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.CannotBeNull">
            <summary>
              Looks up a localized string similar to The object of type &apos;{0}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.DelegateReturnsVoid">
            <summary>
              Looks up a localized string similar to Type {0} returns void..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.ElementCannotBeNull">
            <summary>
              Looks up a localized string similar to The sequence provided as argument &apos;{0}&apos; cannot contain null elements..
            </summary>
        </member>
        <member name="P:Autofac.Util.EnforceResources.NotDelegate">
            <summary>
              Looks up a localized string similar to Type {0} is not a delegate type..
            </summary>
        </member>
        <member name="T:Autofac.ResolutionExtensions">
            <summary>
            Adds syntactic convenience methods to the <see cref="T:Autofac.Core.IComponentContext"/> interface.
            </summary>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectProperties``1(Autofac.Core.IComponentContext,``0)">
            <summary>
            Set any properties on <paramref name="instance"/> that can be
            resolved in the context.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.InjectUnsetProperties``1(Autofac.Core.IComponentContext,``0)">
            <summary>
            Set any null-valued properties on <paramref name="instance"/> that can be
            resolved by the container.
            </summary>
            <typeparam name="TService">Type of instance. Used only to provide method chaining.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="instance">The instance to inject properties into.</param>
            <returns><paramref name="instance"/>.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.Guid)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="registrationId">Identity of the registration providing the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.Guid,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="registrationId">Identity of the registration providing the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.Guid,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="registrationId">Identity of the registration providing the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">Name of the service.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The service to retrieve.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <returns>The component instance that provides the service.</returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve``1(Autofac.Core.IComponentContext,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <typeparam name="TService">The type to which the result will be cast.</typeparam>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The service type.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The service name.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The service name.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.Resolve(Autofac.Core.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="service">The service to resolve.</param>
            <returns>
            The component instance that provides the service.
            </returns>
            <exception cref="T:Autofac.Core.Registration.ComponentNotRegisteredException"/>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext,System.String)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext,System.String,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional``1(Autofac.Core.IComponentContext,System.String,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceName">The name of the service.</param>
            <typeparam name="TService">The service to resolve.</typeparam>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,System.Type)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,System.Type,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,System.Type,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="parameters">Parameters for the service.</param>
            <param name="serviceType">The type of the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,Autofac.Core.Service)">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.ResolveOptional(Autofac.Core.IComponentContext,Autofac.Core.Service,Autofac.Core.Parameter[])">
            <summary>
            Retrieve a service from the context, or null if the service is not
            registered.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service.</param>
            <param name="parameters">Parameters for the service.</param>
            <returns>
            The component instance that provides the service, or null.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered``1(Autofac.Core.IComponentContext)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <typeparam name="TService">The service to test for the registration of.</typeparam>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.Core.IComponentContext,System.Type)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.Core.IComponentContext,System.String)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.IsRegistered(Autofac.Core.IComponentContext,Autofac.Core.Service)">
            <summary>
            Determine whether the specified service is available in the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to test for the registration of.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.Core.IComponentContext,Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <param name="parameters">The parameters.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.Core.IComponentContext,Autofac.Core.Service,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="service">The service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.Core.IComponentContext,System.Type,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceType">The service type to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="M:Autofac.ResolutionExtensions.TryResolve(Autofac.Core.IComponentContext,System.String,System.Object@)">
            <summary>
            Try to retrieve a service from the context.
            </summary>
            <param name="context">The context from which to resolve the service.</param>
            <param name="serviceName">The name of the service to resolve.</param>
            <param name="instance">The resulting component instance providing the service, or null.</param>
            <returns>
            True if a component providing the service is available.
            </returns>
            <exception cref="T:Autofac.Core.DependencyResolutionException"/>
        </member>
        <member name="T:Autofac.Features.OpenGenerics.OpenGenericActivatorGenerator">
            <summary>
            Generates activators for open generic types.
            </summary>
        </member>
        <member name="M:Autofac.Features.OpenGenerics.OpenGenericActivatorGenerator.TryGenerateActivator(Autofac.Core.Service,System.Collections.Generic.IEnumerable{Autofac.Core.Service},Autofac.Builder.ReflectionActivatorData,Autofac.Core.IInstanceActivator@,System.Collections.Generic.IEnumerable{Autofac.Core.Service}@)">
            <summary>
            Given a requested service and registration data, attempt to generate an
            activator for the service.
            </summary>
            <param name="service">Service that was requested.</param>
            <param name="configuredServices">Services associated with the activator generator.</param>
            <param name="reflectionActivatorData">Data specific to this kind of activator.</param>
            <param name="activator">Resulting activator.</param>
            <param name="services">Services provided by the activator.</param>
            <returns>True if an activator could be generated.</returns>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.ParameterMapping">
            <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.Adaptive">
            <summary>
            Chooses parameter mapping based on the factory type.
            For Func-based factories this is equivalent to ByType, for all
            others ByName will be used.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByName">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as NamedParameters based on the parameter
            names in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByType">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as TypedParameters based on the parameter
            types in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="F:Autofac.Features.GeneratedFactories.ParameterMapping.ByPosition">
            <summary>
            Pass the parameters supplied to the delegate through to the
            underlying registration as PositionalParameters based on the parameter
            indices in the delegate type's formal argument list.
            </summary>
        </member>
        <member name="T:Autofac.Features.GeneratedFactories.FactoryGenerator">
            <summary>
            Generates context-bound closures that represent factories from
            a set of heuristics based on delegate type signatures.
            </summary>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.#ctor(System.Type,Autofac.Core.Service,Autofac.Features.GeneratedFactories.ParameterMapping)">
            <summary>
            Create a factory generator.
            </summary>
            <param name="service">The service that will be resolved in
            order to create the products of the factory.</param>
            <param name="delegateType">The delegate to provide as a factory.</param>
            <param name="parameterMapping">The parameter mapping mode to use.</param>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="M:Autofac.Features.GeneratedFactories.FactoryGenerator.GenerateFactory``1(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Generates a factory delegate that closes over the provided context.
            </summary>
            <param name="context">The context in which the factory will be used.</param>
            <param name="parameters">Parameters provided to the resolve call for the factory itself.</param>
            <returns>A factory delegate that will work within the context.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator">
            <summary>
            Provides a pre-constructed instance.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.#ctor(System.Object)">
            <summary>
            Provide the specified instance.
            </summary>
            <param name="instance">The instance to provide.</param>
        </member>
        <member name="M:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivator.ActivateInstance(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="T:Autofac.Builder.IFluentInterface">
            <summary>
            Hides standard Object members to make fluent interfaces
            easier to read.
            Based on blog post by @kzu here:
            http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx
            </summary>
        </member>
        <member name="M:Autofac.Builder.IFluentInterface.GetType">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IFluentInterface.GetHashCode">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IFluentInterface.ToString">
            <summary>
            Standard System.Object member.
            </summary>
            <returns>Standard result.</returns>
        </member>
        <member name="M:Autofac.Builder.IFluentInterface.Equals(System.Object)">
            <summary>
            Standard System.Object member.
            </summary>
            <param name="other">The other.</param>
            <returns>Standard result.</returns>
        </member>
        <member name="T:Autofac.Builder.RegistrationData">
            <summary>
            Data common to all registrations made in the container, both direct (IComponentRegistration)
            and dynamic (IRegistrationSource.)
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Services">
            <summary>
            The services explicitly assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Ownership">
            <summary>
            The instance ownership assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Lifetime">
            <summary>
            The lifetime assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.Sharing">
            <summary>
            The sharing mode assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.ExtendedProperties">
            <summary>
            Extended properties assigned to the component.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.PreparingHandlers">
            <summary>
            Handlers for the Preparing event.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.ActivatingHandlers">
            <summary>
            Handlers for the Activating event.
            </summary>
        </member>
        <member name="P:Autofac.Builder.RegistrationData.ActivatedHandlers">
            <summary>
            Handlers for the Activated event.
            </summary>
        </member>
        <member name="T:Autofac.Core.Registration.ComponentRegistry">
            <summary>
            Provides component registrations according to the services they provide.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistry._synchRoot">
            <summary>
            Protects instance variables from concurrent access.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistry._unregisteredServices">
            <summary>
            Services known not to be registered.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistry._dynamicRegistrationSources">
            <summary>
            External registration sources.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistry._defaultRegistrations">
            <summary>
            Associates each service with the default registration that
            can provide that service.
            </summary>
        </member>
        <member name="F:Autofac.Core.Registration.ComponentRegistry._registrations">
            <summary>
            All registrations.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.#ctor">
            <summary>
            Constructs a new component registry.
            </summary>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.IsRegistered(Autofac.Core.Service)">
            <summary>
            Determines whether the specified service is registered.
            </summary>
            <param name="service">The service to test.</param>
            <returns>True if the service is registered.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.TryGetRegistration(Autofac.Core.Service,Autofac.Core.IComponentRegistration@)">
            <summary>
            Gets the default component registration that will be used to satisfy
            requests for the provided service.
            </summary>
            <param name="service">The service.</param>
            <param name="registration">The registration.</param>
            <returns>
            True if a default exists, false otherwise.
            </returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.Register(Autofac.Core.IComponentRegistration)">
            <summary>
            Register a component.
            </summary>
            <param name="registration">The component registration.</param>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.RegistrationsFor(Autofac.Core.Service)">
            <summary>
            Selects from the available registrations after ensuring that any
            dynamic registration sources that may provide <paramref name="service"/>
            have been invoked.
            </summary>
            <param name="service">The service for which registrations are sought.</param>
            <returns>Registrations supporting <paramref name="service"/>.</returns>
        </member>
        <member name="M:Autofac.Core.Registration.ComponentRegistry.AddRegistrationSource(Autofac.Core.IRegistrationSource)">
            <summary>
            Add a registration source that will provide registrations on-the-fly.
            </summary>
            <param name="source"></param>
        </member>
        <member name="E:Autofac.Core.Registration.ComponentRegistry.Registered">
            <summary>
            Fired whenever a component is registered - either explicitly or via a
            <see cref="T:Autofac.Core.IRegistrationSource"/>.
            </summary>
        </member>
        <member name="P:Autofac.Core.Registration.ComponentRegistry.Registrations">
            <summary>
            Enumerate the registered components.
            </summary>
        </member>
        <member name="T:Autofac.Core.Disposer">
            <summary>
            Maintains a set of objects to dispose, and disposes them in the reverse order
            from which they were added when the Disposer is itself disposed.
            </summary>
        </member>
        <member name="F:Autofac.Core.Disposer._items">
            <summary>
            Contents all implement IDisposable.
            </summary>
        </member>
        <member name="M:Autofac.Core.Disposer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:Autofac.Core.Disposer.AddInstanceForDisposal(System.IDisposable)">
            <summary>
            Adds an object to the disposer. When the disposer is
            disposed, so will the object be.
            </summary>
            <param name="instance">The instance.</param>
        </member>
        <member name="T:Autofac.Core.DependencyResolutionExceptionResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.DependencyResolutionExceptionResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.DependencyResolutionExceptionResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.DependencyResolutionExceptionResources.DefaultMessage">
            <summary>
              Looks up a localized string similar to A required component could not be created..
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector">
            <summary>
            Selects the constructor with the most parameters.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.MostParametersConstructorSelector.SelectConstructorBinding(System.Collections.Generic.IEnumerable{Autofac.Core.Activators.Reflection.ConstructorParameterBinding})">
            <summary>
            Selects the best constructor from the available constructors.
            </summary>
            <param name="constructorBindings">Available constructors.</param>
            <returns>The best constructor.</returns>
        </member>
        <member name="T:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder">
            <summary>
            Finds constructors based on their binding flags.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.#ctor(System.Reflection.BindingFlags)">
            <summary>
            Create an instance matching constructors with the supplied binding flags.
            </summary>
            <param name="bindingFlags">Binding flags to match.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Reflection.BindingFlagsConstructorFinder.FindConstructors(System.Type)">
            <summary>
            Finds suitable constructors on the target type.
            </summary>
            <param name="targetType">Type to search for constructors.</param>
            <returns>Suitable constructors.</returns>
        </member>
        <member name="T:Autofac.Builder.RegistrationSource`3">
            <summary>
            Registration source based on a registration builder.
            </summary>
            <typeparam name="TLimit">LimitType for the registration.</typeparam>
            <typeparam name="TActivatorData">Type of activator data.</typeparam>
            <typeparam name="TRegistrationStyle">Registration style.</typeparam>
        </member>
        <member name="M:Autofac.Builder.RegistrationSource`3.#ctor(Autofac.Builder.RegistrationBuilder{`0,`1,`2},Autofac.Builder.IActivatorGenerator{`1})">
            <summary>
            Try to generate registrations using the provided activator generator, with
            the data from the provided registration.
            </summary>
            <param name="builder">Registration data.</param>
            <param name="activatorGenerator">Activator generator.</param>
        </member>
        <member name="M:Autofac.Builder.RegistrationSource`3.TryGetRegistration(Autofac.Core.Service,System.Func{Autofac.Core.Service,System.Boolean},Autofac.Core.IComponentRegistration@)">
            <summary>
            Retrieve a registration for an unregistered service, to be used
            by the container.
            </summary>
            <param name="service">The service that was requested.</param>
            <param name="registeredServicesTest">A predicate that can be queried to determine if a service is already registered.</param>
            <param name="registration">A registration providing the service.</param>
            <returns>True if the registration could be created.</returns>
        </member>
        <member name="T:Autofac.Builder.ReflectionActivatorData">
            <summary>
            Builder for reflection-based activators.
            </summary>
        </member>
        <member name="M:Autofac.Builder.ReflectionActivatorData.#ctor(System.Type)">
            <summary>
            Specify a reflection activator for the given type.
            </summary>
            <param name="implementor">Type that will be activated.</param>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ImplementationType">
            <summary>
            Get the implementation type.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorFinder">
            <summary>
            The constructor finder for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConstructorSelector">
            <summary>
            The constructor selector for the registration.
            </summary>
        </member>
        <member name="P:Autofac.Builder.ReflectionActivatorData.ConfiguredParameters">
            <summary>
            The explicitly bound constructor parameters.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Autofac.Core.Activators.ProvidedInstance.ProvidedInstanceActivatorResources.InstanceAlreadyActivated">
            <summary>
              Looks up a localized string similar to The provided instance has already been used in an activation request. Did you combine a provided instance with non-root/single-instance lifetime/sharing?.
            </summary>
        </member>
        <member name="T:Autofac.Core.Activators.Delegate.DelegateActivator">
            <summary>
            Activate instances using a delegate.
            </summary>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.#ctor(System.Type,System.Func{Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter},System.Object})">
            <summary>
            Create a delegate activator.
            </summary>
            <param name="limitType">The most specific type to which activated instances can be cast.</param>
            <param name="activationFunction">Activation delegate.</param>
        </member>
        <member name="M:Autofac.Core.Activators.Delegate.DelegateActivator.ActivateInstance(Autofac.Core.IComponentContext,System.Collections.Generic.IEnumerable{Autofac.Core.Parameter})">
            <summary>
            Activate an instance in the provided context.
            </summary>
            <param name="context">Context in which to activate instances.</param>
            <param name="parameters">Parameters to the instance.</param>
            <returns>The activated instance.</returns>
            <remarks>
            The context parameter here should probably be ILifetimeScope in order to reveal Disposer,
            but will wait until implementing a concrete use case to make the decision
            </remarks>
        </member>
        <member name="T:Autofac.Builder.GeneratedFactoryActivatorData">
            <summary>
            Data used to create factory activators.
            </summary>
        </member>
        <member name="P:Autofac.Builder.GeneratedFactoryActivatorData.ParameterMapping">
            <summary>
            Determines how the parameters of the delegate type are passed on
            to the generated Resolve() call as Parameter objects.
            For Func-based delegates, this defaults to ByType. Otherwise, the
            parameters will be mapped by name.
            </summary>
        </member>
    </members>
</doc>
